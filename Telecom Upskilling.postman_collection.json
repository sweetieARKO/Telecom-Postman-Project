{
	"info": {
		"_postman_id": "4819a5b1-d1eb-4df8-be8e-7d82c79832f0",
		"name": "Telecom Upskilling",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35060888",
		"_collection_link": "https://amali-tech.postman.co/workspace/Telecom~4501d323-319c-4cc3-9156-a774c8e6477b/collection/35060888-4819a5b1-d1eb-4df8-be8e-7d82c79832f0?action=share&source=collection_link&creator=35060888"
	},
	"item": [
		{
			"name": "Login with correct credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var responseBody = pm.response.json();\r",
							"pm.globals.set(\"authToken\", responseBody.token);\r",
							"\r",
							"});\r",
							"pm.test(\"Response has the required Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Pre-request Script\r",
							"if (!pm.environment.get(\"authToken\")) {\r",
							"    // Perform login to refresh token\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"{{baseUrl/login}}\"), \r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                email: pm.environment.get(\"userEmail\"), // replace with your user email\r",
							"                password: pm.environment.get(\"userPassword\") // replace with your user password\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        // Set token after successful login\r",
							"        pm.environment.set(\"authToken\", res.json().token);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login with no Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.within(400, 451);\r",
							"    const response = pm.response.json();\r",
							"    if (response.token) {\r",
							"        pm.environment.set(\"authToken\", response.token);\r",
							"    } else {\r",
							"        console.log(\"Token not found in response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Token is expired\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: 'https://reqres.in/api/login',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"email\": \"eve.holt@reqres.in\",\r",
							"                \"password\": \"pistol\"\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"        } else {\r",
							"            const response = res.json();\r",
							"            if (response.token) {\r",
							"                pm.environment.set(\"authToken\", response.token); // Store new token\r",
							"                console.log(\"Token refreshed successfully\");\r",
							"            } else {\r",
							"                console.log(\"Failed to refresh token\");\r",
							"            }\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login with no email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.within(400, 499);\r",
							"});\r",
							"pm.test(\"Log response for missing email\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    console.log(\"Response for missing email:\", responseJson);\r",
							"\r",
							"    pm.expect(responseJson.error).to.exist; \r",
							"});\r",
							"pm.test(\"Error message for missing email\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    console.log(\"Response for missing email:\", responseJson); \r",
							"\r",
							"    pm.expect(responseJson.error).to.eql(\"Missing email or username\"); \r",
							"    });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.within(200, 299);\r",
							"    const responseBody = pm.response.json();\r",
							"    if(responseBody.token){\r",
							"        pm.environment.set(\"authToken\", responseBody.token);\r",
							"    } else {\r",
							"        console.log(\"Token not found in response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"First Name is updated correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.fist_name).to.eql(\"Benjamin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Last Name is updated correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.last_name).to.eql(\"Duccun\");\r",
							"});\r",
							"pm.test(\"Job is updated successfuly\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"eve.holidst@reqres.in\",\r\n    \"password\": \"cityslicka\",\r\n    \"fist_name\": \"Benjamin\",\r\n    \"last_name\": \"Duccun\",\r\n    \"id\": \"30\",\r\n    \"job\": \"mechanic\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2?id=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					],
					"query": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2?id=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					],
					"query": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Id is present\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"id is number\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if(jsonData.length > 0) {\r",
							"        pm.expect(jsonData[0].id).to.be.a(\"number\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"User first_name is present\", function() {\r",
							"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
							"});\r",
							"\r",
							"pm.test(\"User last_name is present\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Email is present\",function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"email\");\r",
							"});\r",
							"\r",
							"pm.test(\"Password is present\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"password\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body structure is valid\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"email\");\r",
							"    pm.expect(pm.response.text()).to.include(\"password\");\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"first_name\": \"Winfred\",\r\n        \"last_name\": \"Binney\",\r\n        \"email\": \"eveeddjskholt@reqres.in\",\r\n        \"password\": \"cityslkksicka\",\r\n        \"id\":1\r\n    },\r\n    {\r\n        \"first_name\": \"Wenfred\",\r\n        \"last_name\": \"Dinney\",\r\n        \"email\": \"eveejdjskholt@reqres.in\",\r\n        \"password\": \"cityslkksicka\",\r\n        \"id\": 2\r\n        \r\n    }\r\n]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validating each created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const createdAt = new Date(response.createdAt);\r",
							"const currentTime = new Date();\r",
							"\r",
							"// Check if 'id' is unique by storing in environment (or collection) variable\r",
							"let existingIds = pm.environment.get(\"existingIds\") || [];\r",
							"if (existingIds.includes(response.id)) {\r",
							"    console.error(\"Duplicate ID found:\", response.id);\r",
							"} else {\r",
							"    existingIds.push(response.id);\r",
							"    pm.environment.set(\"existingIds\", existingIds);\r",
							"    pm.test(\"ID is unique\", function () {\r",
							"        pm.expect(existingIds).to.include(response.id);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Created within the last minute\", function () {\r",
							"    pm.expect(createdAt).to.be.a(\"date\"); // Check if createdAt is a valid date\r",
							"    if (!isNaN(createdAt.getTime())) {\r",
							"        const timeDifference = (currentTime - createdAt) / 1000; // Difference in seconds\r",
							"        pm.expect(timeDifference).to.be.below(60);\r",
							"    } else {\r",
							"        console.error(\"createdAt is not a valid date:\", response.createdAt);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"name\": \"Alice Smith\",\r\n        \"job\": \"Engineer\"\r\n    },\r\n    {\r\n        \"name\": \"Bob Johnson\",\r\n        \"job\": \"Manager\"\r\n    },\r\n    {\r\n        \"name\": \"Carol Williams\",\r\n        \"job\": \"Designer\"\r\n    }\r\n]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.within(200, 299);\r",
							"});\r",
							"\r",
							"// Capture the response JSON and check for a token (if applicable)\r",
							"const response = pm.response.json();\r",
							"if (response.token) {\r",
							"    pm.environment.set(\"authToken\", response.token);  // Store token in environment variable\r",
							"    pm.test(\"Token is present in response\", function () {\r",
							"        pm.expect(response.token).to.be.a(\"string\");\r",
							"    });\r",
							"} else {\r",
							"    console.log(\"Token not found in the response\");\r",
							"}\r",
							"pm.test(\"Body size is greater than 0 \", function (){\r",
							"    pm.expect(pm.response.text().length).to.be.greaterThan(0);\r",
							"    })\r",
							"pm.test(\"First user's email contains '@'\", function () {\r",
							"    pm.expect(pm.response.json().data[0].email).to.include(\"@\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  a single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.within(200, 299);\r",
							"});\r",
							"pm.test(\"Response contains user data\", function () {\r",
							"const jsonData = pm.response.json();\r",
							"pm.expect(jsonData.data).to.have.property(\"id\", 2);\r",
							"pm.expect(jsonData.data).to.have.property(\"email\").that.includes(\"@\");\r",
							"pm.expect(jsonData.data).to.have.property(\"first_name\", \"Janet\");\r",
							"pm.expect(jsonData.data).to.have.property(\"last_name\", \"Weaver\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMzEwLCJlbWFpbCI6ImFiaWdhaWwuYXJrb0BhbWFsaXRlY2guY29tIiwiZmlyc3RfbmFtZSI6IkFiaWdhaWwiLCJsYXN0X25hbWUiOiJBcmtvIiwib3RoZXJfbmFtZSI6bnVsbCwib2ZmaWNlIjoiMjUiLCJvcmdhbml6YXRpb24iOiIxMDQyIiwicHJvZmlsZV9pbWFnZSI6bnVsbCwicm9sZXMiOltdLCJhcHBzIjpbImVtcGxveWVlIG1hbmFnZW1lbnQiLCJmJmMiLCJsb2FucyIsImxlYXZlIG1hbmFnZW1lbnQiLCJtZWV0aW5nIGJvb2tpbmciLCJwZXJmb3JtYW5jZSBtYW5hZ2VtZW50Il0sImlhdCI6MTcyMzQ0OTkxNywiZXhwIjoxNzIzNDg1OTE3LCJhdWQiOiJodHRwczovL2FtYWxpdGVjaC5jb20vIiwiaXNzIjoiQW1hbGl0ZWNoIFNTTyIsInN1YiI6ImluZm9AYW1hbGl0ZWNoLmNvbSJ9.RHsmm9aDtXtC_T_shZxeD3d2OY1hK3LAryLFCBLqrUw6ieL3LT3E1L4e3zB-VjclI4f1CPOnWAGfHXbF0ILURKOaWyKXKWAELYxh6rdh3qtUEb_HIELbpuQTIGrf6qgw38_Gs6tjPbo82y6-73UqhRbBd4azQTgj1PvL-SUaFeT7CcIFpPFmxxFJI6Sqh38JNm4eA7ICGCnJaTOkfY3-vfmKHlRh0u9T5q3YU4LKvKM_GEdfOs90cFtl2jb2QiclgjKbkYMCh_wlh0UAb1PE2_9c31YN0ltsTOujlpineD7czCvJon5WwZvlEOdyxYuAjIYhb1FhDoTpMkvDZiCZGQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "id",
						"value": "2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/2?id=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"2"
					],
					"query": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "token",
			"value": "QpwL5tke4Pnpja7X4",
			"type": "string"
		},
		{
			"key": "email",
			"value": "eve.holt@reqres.in",
			"type": "string"
		},
		{
			"key": "password",
			"value": "cityslicka",
			"type": "string"
		}
	]
}